{"version":3,"file":"static/js/173.2abe0a7b.chunk.js","mappings":"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","sources":["utils/request.js","apis/movieApi.js","components/Error/index.js","components/Image/index.js","components/Loading/index.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","pages/Movies/Item.js","pages/Movies/List.js","pages/Movies/index.js","../node_modules/src/useInView.tsx"],"sourcesContent":["function checkStatus(res) {\n  if (res.ok) {\n    return res;\n  }\n  const contentType = res.headers.get('content-type');\n\n  if (contentType && contentType.indexOf('application/json') > -1) {\n    return res.json().then((json) => window.Promise.reject(json));\n  }\n  throw new Error(res.statusText);\n}\n\nconst request = async (path, options = {}) => {\n  const { headers = {} } = options;\n  let { body } = options;\n  // build header\n  //headers['Content-Type'] = headers['Content-Type'] || 'application/json';\n  // build body\n  if (\n    headers['Content-Type'] === 'application/json' &&\n    !(typeof body === 'string' || body instanceof String)\n  ) {\n    body = JSON.stringify(body);\n  }\n  // fetch\n  const response = await fetch(path, {\n    ...options,\n    body,\n    headers\n  })\n    .then(checkStatus)\n    .then((res) => res.json());\n  return response;\n};\n\nexport default request;\n","import { useInfiniteQuery, useQuery } from 'react-query';\nimport request from '../utils/request';\n\nconst apiKey = process.env.REACT_APP_OMDB_API_KEY;\nconst OMDbRoot = process.env.REACT_APP_OMDB_API_ROOT;\n\nexport const QUERY_MOVIES = 'apis/MovieApi/QUERY_MOVIES';\nexport const QUERY_MOVIE = 'apis/MovieApi/QUERY_MOVIE';\n\nexport const useQueryMovies = ({ s = '', type = 'movie' }, options = {}) => {\n  const queries = [`apikey=${apiKey}`, `type=${type}`];\n  // build queries\n  if (s) queries.push(`s=${s}`);\n  return useInfiniteQuery(\n    [QUERY_MOVIES, { s, type }],\n    ({ pageParam = 1 }) => request(`${OMDbRoot}/?${queries.join('&')}&page=${pageParam}`),\n    {\n      ...options,\n      enabled: !!s, // stop searching if text search is empty\n      getNextPageParam: (lastPage, allPages) => {\n        if (lastPage.Response === 'True') return allPages.length + 1;\n        return false;\n      }\n    }\n  );\n};\n\nexport const useQueryMovie = ({ id = '' }, options = {}) => {\n  const queries = [`apikey=${apiKey}`];\n  // build queries\n  if (id) queries.push(`i=${id}`);\n  options.enabled = !!id;\n\n  return useQuery(\n    [QUERY_MOVIE, { id }],\n    () => request(`${OMDbRoot}/?${queries.join('&')}`),\n    options\n  );\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nconst Error = ({ show = false, errorMessage = 'Error' }) => {\n  const [isShow, setIsShow] = useState(show);\n  const handleClose = () => setIsShow(false);\n  return (\n    <Modal\n      variant=\"danger\"\n      show={isShow}\n      backdrop=\"static\"\n      centered\n      dialogClassName=\"modal-error\"\n      keyboard={false}>\n      <Modal.Body className=\"text-center text-danger\">{errorMessage}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\nError.propTypes = {\n  show: PropTypes.bool,\n  errorMessage: PropTypes.string\n};\n\nexport default Error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moviePlaceholder from '../../assets/images/movie-placeholder.png';\n\nconst Image = ({ src = '', className = '', placeholder = '' }) => {\n  let imgPath = src;\n  if (!src || src.toUpperCase() === 'N/A') {\n    imgPath = placeholder || moviePlaceholder;\n  }\n  return (\n    <div\n      style={{ backgroundImage: `url(${imgPath})` }}\n      className={`${className} cover-img bg-light`}>\n      <img src={imgPath} className=\"w-100 invisible\" />\n    </div>\n  );\n};\nImage.propTypes = {\n  src: PropTypes.string,\n  className: PropTypes.string,\n  placeholder: PropTypes.string\n};\n\nexport default Image;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from 'react-bootstrap/Spinner';\n\nconst Loading = ({ loadingMessage = 'Loading ...' }) => (\n  <Spinner animation=\"border\" role=\"status\">\n    <span className=\"visually-hidden\">{loadingMessage}</span>\n  </Spinner>\n);\nLoading.propTypes = {\n  loadingMessage: PropTypes.string\n};\n\nexport default Loading;\n","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { generatePath, Link } from 'react-router-dom';\r\nimport { ROUTES } from '../../constants/routes';\r\nimport Image from '../../components/Image';\r\nconst Item = ({ movie }) => {\r\n  return (\r\n    <div className=\"card shadow-sm h-100\">\r\n      <Image src={movie.Poster} className=\"movies-item-img card-img-top\" />\r\n      <div className=\"card-body w-100 d-flex flex-column justify-content-between\">\r\n        <div className=\"card-title h5\">{movie.Title}</div>\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          <Link\r\n            to={generatePath(ROUTES.MOVIE, { id: movie.imdbID })}\r\n            className=\"btn btn-sm btn-dark\">\r\n            View\r\n          </Link>\r\n          <small>{movie.Year}</small>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nItem.propTypes = {\r\n  movie: PropTypes.object\r\n};\r\nexport default Item;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Item from './Item';\r\n\r\nconst List = ({ movies }) => {\r\n  return (\r\n    <div className=\"movies\">\r\n      <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3\">\r\n        {movies.map((movie) => (\r\n          <div className=\"col\" key={movie.imdbID}>\r\n            <Item movie={movie} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nList.propTypes = {\r\n  movies: PropTypes.array\r\n};\r\nexport default List;\r\n","import React, { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { useInView } from 'react-intersection-observer';\nimport { useQueryMovies } from '../../apis/movieApi';\nimport Loading from '../../components/Loading';\nimport List from './List';\nimport Error from '../../components/Error';\n\nconst Movies = () => {\n  // parse text search via query url\n  const [searchParams] = useSearchParams();\n  // handle the item where should trigger to fetch the next page\n  const { ref, inView } = useInView();\n  const { data, isFetching, isError, error, hasNextPage, isFetchingNextPage, fetchNextPage } =\n    useQueryMovies({\n      s: searchParams.get('txtSearch')\n    });\n\n  useEffect(() => {\n    // fetch next page when scrolldown to the bottom\n    if (inView) {\n      fetchNextPage();\n    }\n  }, [inView]);\n\n  // show error if request is failed\n  if (isError) return <Error show={true} errorMessage={error.message} />;\n\n  return (\n    <>\n      <section className=\"py-4\">\n        <h3>Search: {searchParams.get('txtSearch')}</h3>\n        {data && <div>Total {data.pages[0].totalResults || 0} results</div>}\n      </section>\n      {data && (\n        <List\n          movies={data.pages.reduce((movies, page) => {\n            return [...movies, ...(page.Search || [])];\n          }, [])}\n        />\n      )}\n      {/* element to handle scroll to the bottom to trigger fetch the next page*/}\n      {(isFetching || hasNextPage) && !isFetchingNextPage && (\n        <div ref={ref} className=\"text-center py-5\">\n          <Loading />\n        </div>\n      )}\n    </>\n  );\n};\nexport default Movies;\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["checkStatus","res","ok","contentType","headers","get","indexOf","json","then","window","Promise","reject","Error","statusText","request","path","options","body","String","JSON","stringify","fetch","response","apiKey","process","OMDbRoot","QUERY_MOVIES","QUERY_MOVIE","useQueryMovies","s","type","queries","push","useInfiniteQuery","pageParam","join","enabled","getNextPageParam","lastPage","allPages","Response","length","useQueryMovie","id","useQuery","show","errorMessage","useState","isShow","setIsShow","variant","backdrop","centered","dialogClassName","keyboard","className","onClick","src","placeholder","imgPath","toUpperCase","moviePlaceholder","style","backgroundImage","loadingMessage","animation","role","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","Object","keys","sort","filter","key","map","root","has","set","toString","createObserver","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","inView","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","splice","delete","unobserve","size","disconnect","isPlainChildren","props","children","React","movie","Image","Poster","Title","to","generatePath","ROUTES","imdbID","Year","movies","useSearchParams","searchParams","delay","rootMargin","triggerOnce","skip","initialInView","onChange","ref","setRef","state","setState","current","entryTarget","_state$entry","result","useInView","data","isFetching","isError","error","hasNextPage","isFetchingNextPage","fetchNextPage","useEffect","message","pages","totalResults","reduce","page","Search","Loading"],"sourceRoot":""}