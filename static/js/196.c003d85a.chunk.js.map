{"version":3,"file":"static/js/196.c003d85a.chunk.js","mappings":"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","sources":["utils/request.js","apis/movieApi.js","components/Error/index.js","components/Image/index.js","components/Loading/index.js","pages/Movie/Title.js","pages/Movie/Rating.js","pages/Movie/Info.js","pages/Movie/index.js"],"sourcesContent":["function checkStatus(res) {\n  if (res.ok) {\n    return res;\n  }\n  const contentType = res.headers.get('content-type');\n\n  if (contentType && contentType.indexOf('application/json') > -1) {\n    return res.json().then((json) => window.Promise.reject(json));\n  }\n  throw new Error(res.statusText);\n}\n\nconst request = async (path, options = {}) => {\n  const { headers = {} } = options;\n  let { body } = options;\n  // build header\n  //headers['Content-Type'] = headers['Content-Type'] || 'application/json';\n  // build body\n  if (\n    headers['Content-Type'] === 'application/json' &&\n    !(typeof body === 'string' || body instanceof String)\n  ) {\n    body = JSON.stringify(body);\n  }\n  // fetch\n  const response = await fetch(path, {\n    ...options,\n    body,\n    headers\n  })\n    .then(checkStatus)\n    .then((res) => res.json());\n  return response;\n};\n\nexport default request;\n","import { useInfiniteQuery, useQuery } from 'react-query';\nimport request from '../utils/request';\n\nconst apiKey = process.env.REACT_APP_OMDB_API_KEY;\nconst OMDbRoot = process.env.REACT_APP_OMDB_API_ROOT;\n\nexport const QUERY_MOVIES = 'apis/MovieApi/QUERY_MOVIES';\nexport const QUERY_MOVIE = 'apis/MovieApi/QUERY_MOVIE';\n\nexport const useQueryMovies = ({ s = '', type = 'movie' }, options = {}) => {\n  const queries = [`apikey=${apiKey}`, `type=${type}`];\n  // build queries\n  if (s) queries.push(`s=${s}`);\n  return useInfiniteQuery(\n    [QUERY_MOVIES, { s, type }],\n    ({ pageParam = 1 }) => request(`${OMDbRoot}/?${queries.join('&')}&page=${pageParam}`),\n    {\n      ...options,\n      enabled: !!s, // stop searching if text search is empty\n      getNextPageParam: (lastPage, allPages) => {\n        if (lastPage.Response === 'True') return allPages.length + 1;\n        return false;\n      }\n    }\n  );\n};\n\nexport const useQueryMovie = ({ id = '' }, options = {}) => {\n  const queries = [`apikey=${apiKey}`];\n  // build queries\n  if (id) queries.push(`i=${id}`);\n  options.enabled = !!id;\n\n  return useQuery(\n    [QUERY_MOVIE, { id }],\n    () => request(`${OMDbRoot}/?${queries.join('&')}`),\n    options\n  );\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nconst Error = ({ show = false, errorMessage = 'Error' }) => {\n  const [isShow, setIsShow] = useState(show);\n  const handleClose = () => setIsShow(false);\n  return (\n    <Modal\n      variant=\"danger\"\n      show={isShow}\n      backdrop=\"static\"\n      centered\n      dialogClassName=\"modal-error\"\n      keyboard={false}>\n      <Modal.Body className=\"text-center text-danger\">{errorMessage}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\nError.propTypes = {\n  show: PropTypes.bool,\n  errorMessage: PropTypes.string\n};\n\nexport default Error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport moviePlaceholder from '../../assets/images/movie-placeholder.png';\n\nconst Image = ({ src = '', className = '', placeholder = '' }) => {\n  let imgPath = src;\n  if (!src || src.toUpperCase() === 'N/A') {\n    imgPath = placeholder || moviePlaceholder;\n  }\n  return (\n    <div\n      style={{ backgroundImage: `url(${imgPath})` }}\n      className={`${className} cover-img bg-light`}>\n      <img src={imgPath} className=\"w-100 invisible\" />\n    </div>\n  );\n};\nImage.propTypes = {\n  src: PropTypes.string,\n  className: PropTypes.string,\n  placeholder: PropTypes.string\n};\n\nexport default Image;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from 'react-bootstrap/Spinner';\n\nconst Loading = ({ loadingMessage = 'Loading ...' }) => (\n  <Spinner animation=\"border\" role=\"status\">\n    <span className=\"visually-hidden\">{loadingMessage}</span>\n  </Spinner>\n);\nLoading.propTypes = {\n  loadingMessage: PropTypes.string\n};\n\nexport default Loading;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { useNavigate } from 'react-router-dom';\r\nconst Title = ({ movie }) => {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <>\r\n      <h2 className=\"d-flex align-items-center\">\r\n        <button onClick={() => navigate(-1)} className=\"btn btn-dark btn-sm me-2\">\r\n          <FontAwesomeIcon icon={faChevronLeft}></FontAwesomeIcon> Back\r\n        </button>\r\n        {movie.Title}\r\n      </h2>\r\n      <ul className=\"list-inline\">\r\n        <li className=\"list-inline-item\">{movie.Year}</li>\r\n        <li className=\"list-inline-item\">.</li>\r\n        <li className=\"list-inline-item\">{movie.Runtime}</li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\nTitle.propTypes = {\r\n  movie: PropTypes.object\r\n};\r\nexport default Title;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Rating = ({ movie }) => {\r\n  return (\r\n    <>\r\n      <div className=\"d-flex align-items-center mb-3\">\r\n        <FontAwesomeIcon className=\"text-warning\" icon={faStar} size=\"2x\"></FontAwesomeIcon>\r\n        <div className=\"mx-4 text-center\">\r\n          <div className=\"fw-bolder\">IMDB RATING</div>\r\n          <div>\r\n            <span className=\"fw-bold\">{movie.imdbRating}</span> / 10\r\n          </div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className=\"fw-bolder\">VOTES</div>\r\n          {movie.imdbVotes}\r\n        </div>\r\n      </div>\r\n      {movie.Ratings && (\r\n        <ul className=\"list-group list-group-flush\">\r\n          {movie.Ratings.map((Rating) => (\r\n            <li\r\n              key={Rating.Source}\r\n              className=\"list-group-item list-group-item-dark d-flex justify-content-between align-items-center\">\r\n              {Rating.Source}\r\n              <span className=\"badge bg-primary rounded-pill\">{Rating.Value}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nRating.propTypes = {\r\n  movie: PropTypes.object\r\n};\r\nexport default Rating;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Rating from './Rating';\r\n\r\nconst Info = ({ movie }) => {\r\n  return (\r\n    <>\r\n      {movie.Genre && (\r\n        <p>\r\n          {movie.Genre.split(',').map((Genre) => (\r\n            <span key={Genre} className=\"badge rounded-pill text-bg-light me-2\">\r\n              {Genre}\r\n            </span>\r\n          ))}\r\n        </p>\r\n      )}\r\n      <p>{movie.Plot}</p>\r\n      <p>\r\n        <span className=\"fw-bold me-2\">Director</span> {movie.Director}\r\n      </p>\r\n      <p>\r\n        <span className=\"fw-bold me-2\">Writer</span> {movie.Writer}\r\n      </p>\r\n      <p>\r\n        <span className=\"fw-bold me-2\">Actors</span> {movie.Actors}\r\n      </p>\r\n      <p>\r\n        <span className=\"fw-bold me-2\">Awards</span> {movie.Awards}\r\n      </p>\r\n      <p>\r\n        <span className=\"fw-bold me-2\">Country</span> {movie.Country}\r\n      </p>\r\n      <Rating movie={movie} />\r\n    </>\r\n  );\r\n};\r\nInfo.propTypes = {\r\n  movie: PropTypes.object\r\n};\r\nexport default Info;\r\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQueryMovie } from '../../apis/movieApi';\nimport Error from '../../components/Error';\nimport Loading from '../../components/Loading';\nimport Title from './Title';\nimport Info from './Info';\nimport Image from '../../components/Image';\n\nconst Movie = () => {\n  const { id } = useParams();\n  // fetch data\n  const { data, isLoading, isError, error } = useQueryMovie({ id });\n  // show error if request is failed\n  if (isError) return <Error show={true} errorMessage={error.message} />;\n  // show loading at initial access or loading data\n  if (isLoading || !data)\n    return (\n      <div className=\"text-center py-5\">\n        <Loading />\n      </div>\n    );\n  // show page with data\n  return (\n    <>\n      <section className=\"py-4 pb-1\">\n        <Title movie={data} />\n      </section>\n      <div className=\"row g-0\">\n        <div className=\"col-md-7 col-12\">\n          <Image src={data.Poster} />\n        </div>\n        <div className=\"col-md-5 col-12 p-4 p-lg-5 text-bg-dark\">\n          <Info movie={data} />\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Movie;\n"],"names":["checkStatus","res","ok","contentType","headers","get","indexOf","json","then","window","Promise","reject","Error","statusText","request","path","options","body","String","JSON","stringify","fetch","response","apiKey","process","OMDbRoot","QUERY_MOVIES","QUERY_MOVIE","useQueryMovies","s","type","queries","push","useInfiniteQuery","pageParam","join","enabled","getNextPageParam","lastPage","allPages","Response","length","useQueryMovie","id","useQuery","show","errorMessage","useState","isShow","setIsShow","variant","backdrop","centered","dialogClassName","keyboard","className","onClick","src","placeholder","imgPath","toUpperCase","moviePlaceholder","style","backgroundImage","loadingMessage","animation","role","movie","navigate","useNavigate","icon","faChevronLeft","Title","Year","Runtime","faStar","size","imdbRating","imdbVotes","Ratings","map","Rating","Source","Value","Genre","split","Plot","Director","Writer","Actors","Awards","Country","useParams","data","isLoading","isError","error","message","Loading","Image","Poster"],"sourceRoot":""}